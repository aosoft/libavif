name: Windows Build

on:
  [push, workflow_dispatch]
  
jobs:
  build:
    runs-on: windows-latest
    env:
      CONFIGURATION: Release
      SUPPORT_AOM: OFF
      SUPPORT_DAV1D: ON
      SUPPORT_RAV1E: OFF
      SUPPORT_LIBGAV1: OFF
      SUPPORT_SVT: OFF
      SUPPORT_YUV: ON
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
    - uses: ilammy/msvc-dev-cmd@v1
    - uses: ilammy/setup-nasm@v1
    - uses: seanmiddleditch/gha-setup-ninja@master
    #- name: Setup Visual Studio 2019
    #  run: |
    #    cmd.exe /c "call `"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars.txt"
    #    Get-Content "$env:temp\vcvars.txt" | Foreach-Object {
    #      if ($_ -match "^(.*?)=(.*)$") {
    #        $key=$matches[1].ToString()
    #        $value=$matches[2].ToString()
    #        echo "$key=$value" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
    #      }
    #    }
    - name: Setup Rust
      if: ${{ env.SUPPORT_RAV1E == 'ON' }}
      run: |
        rustup default stable-x86_64-pc-windows-msvc
        rustc -vV
        cargo -vV
    - name: Setup Meson
      if: ${{ env.SUPPORT_DAV1D == 'ON' }}
      run: |
        git clone -b 0.57.2 --depth 1 https://github.com/mesonbuild/meson.git
        $meson=$pwd.ToString() + "\meson"
        $bat=$meson + "\meson.bat"
        echo "python $meson\meson.py %*" | Out-File -FilePath $bat -Encoding utf-8
        $path2=$meson + ";"+$env:Path
        echo "Path=$path2" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8
    - name: Check
      run: |
        $env:path
        ninja --version
        nasm --version
        echo SHA=${{ env.GITHUB_SHA }}
    - name: Get submodules
      run: git submodule update --init --recursive
    - name: Build aom
      if: ${{ env.SUPPORT_AOM == 'ON' }}
      run: |
        cd ext
        .\aom.cmd
        cd ..
    - name: Build dav1d
      if: ${{ env.SUPPORT_DAV1D == 'ON' }}
      run: |
        cd ext
        .\dav1d.cmd
        cd ..
    - name: Build rav1e
      if: ${{ env.SUPPORT_RAV1E == 'ON' }}
      run: |
        cd ext
        .\rav1e.cmd
        cd ..
    - name: Build libgav1
      if: ${{ env.SUPPORT_LIBGAV1 == 'ON' }}
      run: |
        cd ext
        .\libgav1.cmd
        cd ..
    - name: Build svt
      if: ${{ env.SUPPORT_SVT == 'ON' }}
      run: |
        cd ext
        .\svt.cmd
        cd ..
    - name: Build libvyuv
      if: ${{ env.SUPPORT_YUV == 'ON' }}
      run: |
        cd ext
        git clone --single-branch https://chromium.googlesource.com/libyuv/libyuv
        cd libyuv
        git checkout 2871589
        mkdir build
        cd build
        cmake -G "Visual Studio 16 2019" -DBUILD_SHARED_LIBS=0 -DCMAKE_BUILD_TYPE=${{ env.CONFIGURATION }} ..
        msbuild /m /p:Configuration="${{ env.CONFIGURATION }}" YUV.sln
        cd ../..
    - name: Get libjpeg / zlibpng
      run: |
        cd ext
        .\libjpeg.cmd
        .\zlibpng.cmd
        cd ..
    - name: CMake Options
      run: |
        $value="-DAVIF_CODEC_AOM=${{ env.SUPPORT_AOM }} " + `
          "-DAVIF_LOCAL_AOM=ON " + `
          "-DAVIF_CODEC_DAV1D=${{ env.SUPPORT_DAV1D }} " + `
          "-DAVIF_LOCAL_DAV1D=ON " + `
          "-DAVIF_CODEC_RAV1E=${{ env.SUPPORT_RAV1E }} " + `
          "-DAVIF_LOCAL_RAV1E=ON " + `
          "-DAVIF_CODEC_LIBGAV1=${{ env.SUPPORT_LIBGAV1 }} " + `
          "-DAVIF_LOCAL_LIBGAV1=ON " + `
          "-DAVIF_CODEC_SVT=${{ env.SUPPORT_SVT }} " + `
          "-DAVIF_LOCAL_SVT=ON " + `
          "-DAVIF_LOCAL_YUV=${{ env.SUPPORT_YUV }} " + `
          "-DAVIF_LOCAL_JPEG=ON " + `
          "-DAVIF_LOCAL_ZLIBPNG=ON "
        echo "CMAKE_OPTIONS=$value" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8
    - name: Build (static lib / app)
      run: |
        mkdir build
        cd build
        cmake --version
        cmake .. `
           ${{ env.CMAKE_OPTIONS }} `
          -DBUILD_SHARED_LIBS=OFF `
          -DAVIF_BUILD_APPS=ON
        msbuild /m /p:Configuration="${{ env.CONFIGURATION }}" libavif.sln
    - name: Build (shared lib)
      run: |
        mkdir build-dll
        cd build-dll
        cmake --version
        cmake .. `
           ${{ env.CMAKE_OPTIONS }} `
          -DBUILD_SHARED_LIBS=ON `
          -DAVIF_BUILD_APPS=OFF
        msbuild /m /p:Configuration="${{ env.CONFIGURATION }}" libavif.sln
    - name: Copy artifact
      run: |
        mkdir artifact\include
        xcopy include artifact\include /s
        mkdir artifact\examples
        xcopy examples artifact\examples /s
        mkdir artifact\lib
        copy build\${{ env.CONFIGURATION }}\*.exe artifact\.
        copy build\${{ env.CONFIGURATION }}\avif.lib artifact\lib\avif_static.lib
        copy build-dll\${{ env.CONFIGURATION }}\*.dll artifact\lib\.
        copy build-dll\${{ env.CONFIGURATION }}\*.lib artifact\lib\.
    - uses: actions/upload-artifact@v2
      with:
         name: libavif_vs2019_x64_${{ env.CONFIGURATION }}_${{ env.GITHUB_SHA }}
         path: artifact
